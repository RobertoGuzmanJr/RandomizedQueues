import edu.princeton.cs.algs4.StdRandom;

public class Deque<Item> implements Iterable<Item> {	
	private int _size;
	private Node<Item> _front;
	private Node<Item> _back;
	
	//inner class for linkedlist implementation
	public class Node<Item>
	{
		public Item value;
		public Node next;
		public Node previous;
	}
	
	// construct an empty deque
	public Deque()
	{
		_size = 0;
	}
	
	// is the deque empty?
	public boolean isEmpty()
	{
		return (_size == 0);
	}
	
	// return the number of items on the deque
	public int size()
	{
		return _size;
	}
	
	// add the item to the front
	public void addFirst(Item item)
	{
		Node<Item> newItem = new Node<Item>();
		newItem.value = item;
		if(isEmpty())
		{
			_front = newItem;
			_back = newItem;
		}
		else
		{
			_front.next = newItem;
			newItem.previous = _front;
			_front = newItem;
		}
		_size++;
	}

	// add the item to the end
	public void addLast(Item item)
	{
		Node<Item> newItem = new Node<Item>();
		newItem.value = item;
		if(isEmpty())
		{
			_front = newItem;
			_back = newItem;
		}
		else
		{
			_back.previous = newItem;
			newItem.next = _back;
			_back = newItem;
		}
		_size++;
	}
	
	// remove and return the item from the front
	public Item removeFirst()
	{
		if(!isEmpty())
		{
			_size--;
			Item result = _front.value;
			_front = _front.previous;
			_front.next = null;
			return result;
		}
		else
		{
			throw new java.util.NoSuchElementException();
		}
	}
	// remove and return the item from the end
	public Item removeLast()
	{
		
	}
	// return an iterator over items in order from front to end
	public Iterator<Item> iterator()
	{
		
	}
	// unit testing
	public static void main(String[] args)
	{
		
	}
}
