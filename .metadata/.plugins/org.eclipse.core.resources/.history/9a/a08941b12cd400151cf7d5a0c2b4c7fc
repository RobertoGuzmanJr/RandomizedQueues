import edu.princeton.cs.algs4.StdRandom;

public class RandomizedQueue<Item> implements Iterable<Item> {
	private Item[] _data;
	private int _size = 0;
	private int _capacity = 1;
	
	// construct an empty randomized queue
	public RandomizedQueue()
	{
		_data = (Item[]) new Object[_capacity];
	}
	
	// is the queue empty?
	public boolean isEmpty()
	{
		return (_size == 0);
	}
	
	// return the number of items on the queue
	public int size()
	{
		return _size;
	}
	
	//function that will resize the array
	private void resize(int newSize)
	{
		Item[] newArray = (Item[]) new Object[newSize];
		for(int i = 0; i < _data.length; i++)
		{
			newArray[i] = _data[i];
		}
		_data = newArray;
		_capacity = newSize;
	}
	
	// add the item
	public void enqueue(Item item)
	{
		//need to double the capacity
		if(_size == _capacity)
		{
			resize(_capacity*2);
		}
		_data[_size++] = item;
	}
	
	// remove and return a random item
	public Item dequeue()
	{
		int indexToRemove = StdRandom.uniform(_size);
		Item data = _data[indexToRemove];
		_data[indexToRemove] = _data[_size-1];
		_data[--_size] = null;
		
		//need to half the size of the array
		if(_size <= _capacity/4)
		{
			resize(_capacity/2);
		}
		return data;
	}
	
	// return (but do not remove) a random item
	public Item sample()
	{
		
	}
	
	// return an independent iterator over items in random order
	public Iterator<Item> iterator()
	{
		
	}
	
	// unit testing
	public static void main(String[] args)
	{
		
	}
}