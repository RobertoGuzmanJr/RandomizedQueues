import java.util.Iterator;
//import edu.princeton.cs.algs4.StdRandom;

public class Deque<Item> implements Iterable<Item> {	
	private int _size;
	private Node<Item> _front;
	private Node<Item> _back;	
	
	//inner class for linkedlist implementation
	public class Node<Item>
	{
		public Item value;
		public Node<Item> next;
		public Node<Item> previous;
	}
	
	// construct an empty deque
	public Deque()
	{
		_size = 0;
	}
	
	// is the deque empty?
	public boolean isEmpty()
	{
		return (_size == 0);
	}
	
	// return the number of items on the deque
	public int size()
	{
		return _size;
	}	
	
	// add the item to the front
	public void addFirst(Item item)
	{
		Node<Item> newItem = new Node<Item>();
		newItem.value = item;
		if(isEmpty())
		{
			_front = newItem;
			_back = newItem;
		}
		else
		{
			_front.next = newItem;
			newItem.previous = _front;
			_front = newItem;
		}
		_size++;
	}
	
	// add the item to the end
	public void addLast(Item item)
	{
		Node<Item> newItem = new Node<Item>();
		newItem.value = item;
		if(isEmpty())
		{
			_front = newItem;
			_back = newItem;
		}
		else
		{
			_back.previous = newItem;
			newItem.next = _back;
			_back = newItem;
		}
		_size++;
	}
	
	// remove and return the item from the front
	public Item removeFirst()
	{
		if(!isEmpty())
		{
			_size--;
			Item result = _front.value;
			if(_size == 0)
			{
				_front = null;
				_back = null;
			}
			else
			{
				_front = _front.previous;
				_front.next = null;
			}
			return result;
		}
		else
		{
			throw new java.util.NoSuchElementException("This is empty!");
		}
	}
	
	// remove and return the item from the end
	public Item removeLast()
	{
		if(!isEmpty())
		{
			_size--;
			Item result = _back.value;
			if(_size == 0)
			{
				_front = null;
				_back = null;
			}
			else
			{
				_back = _back.next;
				_back.previous = null;
			}
			return result;
		}
		else
		{
			throw new java.util.NoSuchElementException("This is empty!");
		}
	}
	
	// return an iterator over items in order from front to end
	public Iterator<Item> iterator()
	{
		return new DequeIterator();
	}
	
	// inner class to deal with iterators
	private class DequeIterator implements Iterator<Item>
	{
		private Node<Item> _current = _back;
		public boolean hasNext()
		{
			return (_current != null);
		}
		public void remove()
		{
			throw new java.lang.UnsupportedOperationException("This is not supported!");
		}
		public Item next()
		{
			if(hasNext())
			{
				throw new java.util.NoSuchElementException("No more items to return!");
			}
			Item item = _current.value;
			_current = _current.next;
			return item;
		}
	}
	
	// unit testing
	public static void main(String[] args)
	{
		Deque<Integer> d1 = new Deque<Integer>();
		boolean test1Status = (d1.isEmpty() == true);
		
		//basic addFirst
		d1.addFirst(1);
		boolean test2Status = (d1.isEmpty() == false);
		boolean test3Status = (d1.size() == 1);
		boolean test4Status = (d1.removeFirst() == 1);
		boolean test5Status = (d1.isEmpty() == true);
		d1.addFirst(1);
		boolean test6Status = (d1.removeLast() == 1);
		boolean test7Status = (d1.isEmpty() == true);
		
		//basic addLast
		d1.addLast(1);
		boolean test8Status = (d1.isEmpty() == false);
		boolean test9Status = (d1.size() == 1);
		boolean test10Status = (d1.removeFirst() == 1);
		boolean test11Status = (d1.isEmpty() == true);
		d1.addLast(1);
		boolean test12Status = (d1.removeLast() == 1);
		boolean test13Status = (d1.isEmpty() == true);
		
		//more advanced
		Deque<Integer> d2 = new Deque<Integer>();
		d2.addFirst(1);
		d2.addFirst(2);
		boolean test14Status = (d2.size() == 2);
		boolean test15Status = (d2.removeLast() == 1);

		Deque<Integer> d3 = new Deque<Integer>();
		d3.addLast(1);
		d3.addLast(2);
		boolean test16Status = (d3.size() == 2);
		boolean test17Status = (d3.removeFirst() == 1);
		
		//most advanced
		Deque<Integer> d4 = new Deque<Integer>();
		d4.addFirst(1);
		d4.addLast(2);
		d4.addFirst(3);
		d4.addLast(4);
		d4.addFirst(5);
		d4.addLast(6);
		System.out.println(d4.size());
		boolean test18Status = (d4.removeLast() == 6);
		System.out.println(d4.size());	
		boolean test19Status = (d4.removeLast() == 4);
		System.out.println(d4.size());
		boolean test20Status = (d4.removeLast() == 2);
		System.out.println(d4.size());
		boolean test21Status = (d4.removeLast() == 1);
		System.out.println(d4.size());
		boolean test22Status = (d4.removeLast() == 3);
		System.out.println(d4.size());
		boolean test23Status = (d4.removeLast() == 5);
		System.out.println(d4.size());
		
		//test the iterator
		Deque<Integer> d5 = new Deque<Integer>();		
		d5.addFirst(1);
		d5.addLast(2);
		d5.addFirst(3);
		d5.addLast(4);
		d5.addFirst(5);
		d5.addLast(6);
		Iterator<Integer> iter = d5.iterator();
		while(iter.hasNext())
		{
			Integer i = iter.next();
			System.out.println("We are printing out items in the iterator!");
			System.out.println(i);
		}
		
		
		System.out.println(test1Status);
		System.out.println(test2Status);
		System.out.println(test3Status);
		System.out.println(test4Status);
		System.out.println(test5Status);
		System.out.println(test6Status);
		System.out.println(test7Status);
		System.out.println(test8Status);
		System.out.println(test9Status);
		System.out.println(test10Status);
		System.out.println(test11Status);
		System.out.println(test12Status);
		System.out.println(test13Status);
		System.out.println(test14Status);
		System.out.println(test15Status);
		System.out.println(test16Status);
		System.out.println(test17Status);
		System.out.println(test18Status);
		System.out.println(test19Status);
		System.out.println(test20Status);
		System.out.println(test21Status);
		System.out.println(test22Status);
		System.out.println(test23Status);			
	}
}
